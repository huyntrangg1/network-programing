Sending file using Java TCP Sockets
import java.io.*;
import java.net.Socket;
 
public class Client {
    private static DataOutputStream dataOutputStream = null;
    private static DataInputStream dataInputStream = null;
 
    public static void main(String[] args)
    {
        // Create Client Socket connect to port 900 
        try (Socket socket = new Socket("localhost", 900)) {
            
          dataInputStream = new DataInputStream(
                socket.getInputStream());
            dataOutputStream = new DataOutputStream(
                socket.getOutputStream());
            System.out.println(
                "Sending the File to the Server");
          // Call SendFile Method
          sendFile(
                "/home/dachman/Desktop/Program/gfg/JAVA_Program/File Transfer/txt.pdf");
 
            dataInputStream.close();
            dataInputStream.close();
        }
        catch (Exception e) {
            e.printStackTrace();

        }
    }
 
    // sendFile function define here
    private static void sendFile(String path)
        throws Exception
    {
        int bytes = 0;
        // Open the File where he located in your pc
        File file = new File(path);
        FileInputStream fileInputStream
            = new FileInputStream(file);
 
        // Here we send the File to Server
        dataOutputStream.writeLong(file.length());
        // Here we  break file into chunks
        byte[] buffer = new byte[4 * 1024];
        while ((bytes = fileInputStream.read(buffer))
               != -1) {
          // Send the file to Server Socket  
          dataOutputStream.write(buffer, 0, bytes);
            dataOutputStream.flush();
        }
        // close the file here
        fileInputStream.close();
    }
}




import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
 
public class Server {
 
    private static DataOutputStream dataOutputStream = null;
    private static DataInputStream dataInputStream = null;
 
    public static void main(String[] args)
    {
        // Here we define Server Socket running on port 900
        try (ServerSocket serverSocket
             = new ServerSocket(900)) {
            System.out.println(
                "Server is Starting in Port 900");
            // Accept the Client request using accept method
            Socket clientSocket = serverSocket.accept();
            System.out.println("Connected");
            dataInputStream = new DataInputStream(
                clientSocket.getInputStream());
            dataOutputStream = new DataOutputStream(
                clientSocket.getOutputStream());
            // Here we call receiveFile define new for that
            // file
            receiveFile("NewFile1.pdf");
 
            dataInputStream.close();
            dataOutputStream.close();
            clientSocket.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    // receive file function is start here
 
    private static void receiveFile(String fileName)
        throws Exception
    {
        int bytes = 0;
        FileOutputStream fileOutputStream
            = new FileOutputStream(fileName);
long size
            = dataInputStream.readLong(); // read file size
        byte[] buffer = new byte[4 * 1024];
        while (size > 0
               && (bytes = dataInputStream.read(
                       buffer, 0,
                       (int)Math.min(buffer.length, size)))
                      != -1) {
            // Here we write the file using write method
            fileOutputStream.write(buffer, 0, bytes);
            size -= bytes; // read upto file size
        }
        // Here we received file
        System.out.println("File is Received");
        fileOutputStream.close();
    }
}

Transfer a file from Server TCP Socket to Client TCP Socket 
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class SimpleFileServer {

  public final static int SOCKET_PORT = 13267;  
	// you may change this
  public final static String FILE_TO_SEND = "c:/temp/source.pdf";  
	// you may change this

  public static void main (String [] args ) throws IOException {
    FileInputStream fis = null;
    BufferedInputStream bis = null;
    OutputStream os = null;
    ServerSocket servsock = null;
    Socket sock = null;
    try {
      servsock = new ServerSocket(SOCKET_PORT);
      while (true) {
        System.out.println("Waiting...");
        try {
          sock = servsock.accept();
          System.out.println("Accepted connection : " + sock);
          // send file
          File myFile = new File (FILE_TO_SEND);
          byte [] mybytearray  = new byte [(int)myFile.length()];
          fis = new FileInputStream(myFile);
          bis = new BufferedInputStream(fis);
          bis.read(mybytearray,0,mybytearray.length);
          os = sock.getOutputStream();
          System.out.println("Sending " + FILE_TO_SEND + "(" + mybytearray.length + " bytes)");
          os.write(mybytearray,0,mybytearray.length);
          os.flush();
          System.out.println("Done.");
        }
        finally {
          if (bis != null) bis.close();
          if (os != null) os.close();
          if (sock!=null) sock.close();
        }
      }
    }
    finally {
      if (servsock != null) servsock.close();
    }
  }
}

The client module
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;

public class SimpleFileClient {

  public final static int SOCKET_PORT = 13267;      // you may change this
  public final static String SERVER = "127.0.0.1";  // localhost
  public final static String
       FILE_TO_RECEIVED = "c:/temp/source-downloaded.pdf";  
	// you may change this, I give a
                                                            
	// different name because i don't want to
                                                            
	// overwrite the one used by server...

  public final static int FILE_SIZE = 6022386; 
	// file size temporary hard coded
                                               
	// should bigger than the file to be downloaded

  public static void main (String [] args ) throws IOException {
    int bytesRead;
    int current = 0;
    FileOutputStream fos = null;
    BufferedOutputStream bos = null;
    Socket sock = null;
    try {
      sock = new Socket(SERVER, SOCKET_PORT);
      System.out.println("Connecting...");

      // receive file
      byte [] mybytearray  = new byte [FILE_SIZE];
      InputStream is = sock.getInputStream();
      fos = new FileOutputStream(FILE_TO_RECEIVED);
      bos = new BufferedOutputStream(fos);
      bytesRead = is.read(mybytearray,0,mybytearray.length);
      current = bytesRead;

      do {
         bytesRead =
            is.read(mybytearray, current, (mybytearray.length-current));
         if(bytesRead >= 0) current += bytesRead;
      } while(bytesRead > -1);

      bos.write(mybytearray, 0 , current);
      bos.flush();
      System.out.println("File " + FILE_TO_RECEIVED
          + " downloaded (" + current + " bytes read)");
    }
    finally {
      if (fos != null) fos.close();
      if (bos != null) bos.close();
      if (sock != null) sock.close();
    }
  }

}

Sending file using Java UDP Sockets
import java.io.Serializable;
 
public class FileInfo implements Serializable {
    private static final long serialVersionUID = 1L;
 
    private String destinationDirectory;
    private String sourceDirectory;
    private String filename;
    private long fileSize;
    private int piecesOfFile;
    private int lastByteLength;
    private String status;
     
    // Constructors
     
    // Getter and setter
}

public class UDPServer
{
private static final int PIECES_OF_FILE_SIZE = 1024 * 32;
private DatagramSocket serverSocket;
private int port = 6677;

private void openServer() {
    try {
        serverSocket = new DatagramSocket(port);
        System.out.println("Server is opened on port " + port);
        listening();
    } catch (SocketException e) {
        e.printStackTrace();
    }
}
public void receiveFile() {
    byte[] receiveData = new byte[PIECES_OF_FILE_SIZE];
    DatagramPacket receivePacket;
     
    try {
        // get file info
        receivePacket = new DatagramPacket(receiveData, receiveData.length);
        serverSocket.receive(receivePacket);
        InetAddress inetAddress = receivePacket.getAddress();
        ByteArrayInputStream bais = new ByteArrayInputStream(
                receivePacket.getData());
        ObjectInputStream ois = new ObjectInputStream(bais);
        FileInfo fileInfo = (FileInfo) ois.readObject();
        // show file info
        if (fileInfo != null) {
            System.out.println("File name: " + fileInfo.getFilename());
            System.out.println("File size: " + fileInfo.getFileSize());
            System.out.println("Pieces of file: " + fileInfo.getPiecesOfFile());
            System.out.println("Last bytes length: "+ fileInfo.getLastByteLength());
        }
        // get file content
        System.out.println("Receiving file...");
        File fileReceive = new File(fileInfo.getDestinationDirectory() 
                + fileInfo.getFilename());
        BufferedOutputStream bos = new BufferedOutputStream(
                new FileOutputStream(fileReceive));
        // write pieces of file
        for (int i = 0; i < (fileInfo.getPiecesOfFile() - 1); i++) {
            receivePacket = new DatagramPacket(receiveData, receiveData.length, 
                    inetAddress, port);
            serverSocket.receive(receivePacket);
            bos.write(receiveData, 0, PIECES_OF_FILE_SIZE);
        }
        // write last bytes of file
        receivePacket = new DatagramPacket(receiveData, receiveData.length, 
                inetAddress, port);
        serverSocket.receive(receivePacket);
        bos.write(receiveData, 0, fileInfo.getLastByteLength());
        bos.flush();
        System.out.println("Done!");
 
        // close stream
        bos.close();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    }
}


public static void main(String[] args) {
    UDPServer udpServer = new UDPServer();
    udpServer.openServer();
}



}

At client:
import java.io.Serializable;
 
public class FileInfo implements Serializable {
    private static final long serialVersionUID = 1L;
 
    private String destinationDirectory;
    private String sourceDirectory;
    private String filename;
    private long fileSize;
    private int piecesOfFile;
    private int lastByteLength;
    private String status;
     
    // Constructors
     
    // Getter and setter
}

public class UDPClient
{
private static final int PIECES_OF_FILE_SIZE = 1024 * 32;
private DatagramSocket clientSocket;
private int serverPort = 6677;
private String serverHost = "localhost";

private void connectServer() {
    try {
        clientSocket = new DatagramSocket();
    } catch (SocketException e) {
        e.printStackTrace();
    }
}

private void sendFile(String sourcePath, String destinationDir) {
    InetAddress inetAddress;
    DatagramPacket sendPacket;
 
    try {
        File fileSend = new File(sourcePath);
        InputStream inputStream = new FileInputStream(fileSend);
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        inetAddress = InetAddress.getByName(serverHost);
        byte[] bytePart = new byte[PIECES_OF_FILE_SIZE];
         
        // get file size
        long fileLength = fileSend.length();
        int piecesOfFile = (int) (fileLength / PIECES_OF_FILE_SIZE);
        int lastByteLength = (int) (fileLength % PIECES_OF_FILE_SIZE);
 
        // check last bytes of file
        if (lastByteLength > 0) {
            piecesOfFile++;
        }
 
        // split file into pieces and assign to fileBytess
        byte[][] fileBytess = new byte[piecesOfFile][PIECES_OF_FILE_SIZE];
        int count = 0;
        while (bis.read(bytePart, 0, PIECES_OF_FILE_SIZE) > 0) {
            fileBytess[count++] = bytePart;
            bytePart = new byte[PIECES_OF_FILE_SIZE];
        }
 
        // read file info
        FileInfo fileInfo = new FileInfo();
        fileInfo.setFilename(fileSend.getName());
        fileInfo.setFileSize(fileSend.length());
        fileInfo.setPiecesOfFile(piecesOfFile);
        fileInfo.setLastByteLength(lastByteLength);
        fileInfo.setDestinationDirectory(destinationDir);
 
        // send file info
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(fileInfo);
        sendPacket = new DatagramPacket(baos.toByteArray(), 
                baos.toByteArray().length, inetAddress, serverPort);
        clientSocket.send(sendPacket);
 
        // send file content
        System.out.println("Sending file...");
        // send pieces of file
        for (int i = 0; i < (count - 1); i++) {
            sendPacket = new DatagramPacket(fileBytess[i], PIECES_OF_FILE_SIZE,
                    inetAddress, serverPort);
            clientSocket.send(sendPacket);
            waitServer(40);
        }
        // send last bytes of file
        sendPacket = new DatagramPacket(fileBytess[count - 1], PIECES_OF_FILE_SIZE,
                inetAddress, serverPort);
        clientSocket.send(sendPacket);
        waitServer(40);
 
        // close stream
        bis.close();
    } catch (UnknownHostException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    System.out.println("Sent.");
}


public void waitMillisecond(long millisecond) {
    try {
        Thread.sleep(millisecond);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
}


public static void main(String[] args) {
    String sourcePath = "D:\client\test.zip";
    String destinationDir = "D:\server\";
    UDPClient udpClient = new UDPClient();
    udpClient.connectServer();
    udpClient.sendFile(sourcePath, destinationDir);
}



{

